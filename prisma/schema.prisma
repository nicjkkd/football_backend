generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

// generator zod {
//   provider = "zod-prisma"
//   output   = "./zod" // (default) the directory where generated zod schemas will be saved

//   relationModel = true // (default) Create and export both plain and related models.
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//   // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

model Player {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String
  dateBirth    DateTime? @default(now())
  position     Position? @default(BENCH)
  playerNumber Int?
  Team         Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Team {
  id        String   @id @default(uuid())
  teamName  String   @unique
  city      String
  since     Int
  players   Player[]
  leagues   League[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model League {
  id         String   @id @default(uuid())
  leagueName String   @unique
  teams      Team[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Position {
  BENCH
  GK
  SW
  LB
  LCB
  CB
  RCB
  RB
  LWB
  LDM
  CDM
  RDM
  RWB
  LM
  LCM
  CM
  RCM
  RM
  LW
  LAM
  CAM
  RAM
  RW
  LS
  CS
  RS
}
